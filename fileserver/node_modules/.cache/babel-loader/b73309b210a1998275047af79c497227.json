{"ast":null,"code":"var _jsxFileName = \"/Users/richard/ga/Examples/Fileserver/fileserver/src/App.js\";\nimport React, { Component } from \"react\";\nimport \"./App.css\";\nimport axios from \"axios\";\nimport { Progress } from \"reactstrap\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = async () => {\n      console.log(\"componentDidMount\");\n      const resp = await axios.get(\"localhost:8000\");\n      console.log(resp);\n    };\n\n    this.onChangeHandler = e => {\n      console.log(\"onChangeHandler\");\n\n      if (this.maxSelectFile(e) && this.checkFileType(e) && this.checkFileSize(e)) {\n        this.setState({\n          selectedFile: e.target.files[0],\n          loaded: 0\n        });\n      }\n    };\n\n    this.onClickHandler = () => {\n      console.log(\"onClickHandler\");\n\n      if (this.state.selectedFile !== undefined && this.state.selectedFile !== null) {\n        const data = new FormData();\n        data.append(\"file\", this.state.selectedFile);\n        axios.post(\"http://localhost:8000/upload\", data, {\n          onUploadProgress: ProgressEvent => {\n            console.log(ProgressEvent);\n            this.setState({\n              loaded: ProgressEvent.loaded / ProgressEvent.total * 100\n            });\n          }\n        }).then(res => {\n          console.log(res.statusText);\n          this.setState({\n            selectedFile: null,\n            loaded: 0\n          });\n        });\n      } else {\n        console.log(\"No file selected\");\n      }\n    };\n\n    this.maxSelectFile = e => {\n      console.log(\"maxSelectFile\");\n      let files = e.target.files;\n\n      if (files.length > 3) {\n        const msg = \"Only 3 images can be uploaded at a time\";\n        e.target.value = null;\n        console.log(msg);\n        return false;\n      }\n\n      return true;\n    };\n\n    this.checkFileType = e => {\n      console.log(\"checkFileType\");\n      let files = e.target.files;\n      let err = \"\";\n      const types = [\"image/png\", \"image/jpeg\", \"image/gif\"];\n\n      for (let i = 0; i < files.length; i++) {\n        if (types.every(type => files[i].type !== type)) {\n          err += files[i].type + \" is not a supported format\\n\";\n        }\n      }\n\n      if (err !== \"\") {\n        e.target.value = null;\n        console.log(err);\n        return false;\n      }\n\n      return true;\n    };\n\n    this.checkFileSize = e => {\n      console.log(\"checkFileSize\");\n      let files = e.target.files;\n      let size = 9999999;\n      let err = \"\";\n\n      for (let i = 0; i < files.length; i++) {\n        console.log(files[i].size);\n\n        if (files[i].size > size) {\n          err += files[i].type + \" is too large, please select a smaller file\\n\";\n        }\n      }\n\n      if (err !== \"\") {\n        e.target.value = null;\n        console.log(err);\n        return false;\n      }\n\n      return true;\n    };\n\n    this.state = {\n      selectedFile: null,\n      loaded: 0\n    };\n  }\n\n  render() {\n    console.log(this.state);\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-md-6\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      method: \"post\",\n      action: \"#\",\n      id: \"#\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"form-group files\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, \"Upload Your File \"), React.createElement(\"input\", {\n      type: \"file\",\n      className: \"form-control\",\n      name: \"file\",\n      onChange: this.onChangeHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, React.createElement(Progress, {\n      max: \"100\",\n      color: \"success\",\n      value: this.state.loaded,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, Math.round(this.state.loaded, 2), \"%\")), React.createElement(\"button\", {\n      type: \"button\",\n      className: \"btn btn-success btn-block\",\n      onClick: this.onClickHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, \"Upload\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, \"uploaded files\")))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/richard/ga/Examples/Fileserver/fileserver/src/App.js"],"names":["React","Component","axios","Progress","App","constructor","props","componentDidMount","console","log","resp","get","onChangeHandler","e","maxSelectFile","checkFileType","checkFileSize","setState","selectedFile","target","files","loaded","onClickHandler","state","undefined","data","FormData","append","post","onUploadProgress","ProgressEvent","total","then","res","statusText","length","msg","value","err","types","i","every","type","size","render","Math","round"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport axios from \"axios\";\nimport { Progress } from \"reactstrap\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedFile: null,\n      loaded: 0\n    };\n  }\n\n  componentDidMount = async () => {\n    console.log(\"componentDidMount\");\n    const resp = await axios.get(\"localhost:8000\");\n    console.log(resp);\n  };\n\n  onChangeHandler = e => {\n    console.log(\"onChangeHandler\");\n    if (\n      this.maxSelectFile(e) &&\n      this.checkFileType(e) &&\n      this.checkFileSize(e)\n    ) {\n      this.setState({\n        selectedFile: e.target.files[0],\n        loaded: 0\n      });\n    }\n  };\n\n  onClickHandler = () => {\n    console.log(\"onClickHandler\");\n    if (\n      this.state.selectedFile !== undefined &&\n      this.state.selectedFile !== null\n    ) {\n      const data = new FormData();\n      data.append(\"file\", this.state.selectedFile);\n      axios\n        .post(\"http://localhost:8000/upload\", data, {\n          onUploadProgress: ProgressEvent => {\n            console.log(ProgressEvent)\n            this.setState({\n              loaded: (ProgressEvent.loaded / ProgressEvent.total) * 100\n            });\n          }\n        })\n        .then(res => {\n          console.log(res.statusText);\n          this.setState({\n            selectedFile: null,\n            loaded: 0\n          });\n        });\n    } else {\n      console.log(\"No file selected\");\n    }\n  };\n\n  maxSelectFile = e => {\n    console.log(\"maxSelectFile\");\n    let files = e.target.files;\n    if (files.length > 3) {\n      const msg = \"Only 3 images can be uploaded at a time\";\n      e.target.value = null;\n      console.log(msg);\n      return false;\n    }\n    return true;\n  };\n\n  checkFileType = e => {\n    console.log(\"checkFileType\");\n    let files = e.target.files;\n    let err = \"\";\n    const types = [\"image/png\", \"image/jpeg\", \"image/gif\"];\n    for (let i = 0; i < files.length; i++) {\n      if (types.every(type => files[i].type !== type)) {\n        err += files[i].type + \" is not a supported format\\n\";\n      }\n    }\n    if (err !== \"\") {\n      e.target.value = null;\n      console.log(err);\n      return false;\n    }\n    return true;\n  };\n\n  checkFileSize = e => {\n    console.log(\"checkFileSize\");\n    let files = e.target.files;\n    let size = 9999999;\n    let err = \"\";\n    for (let i = 0; i < files.length; i++) {\n      console.log(files[i].size);\n      if (files[i].size > size) {\n        err += files[i].type + \" is too large, please select a smaller file\\n\";\n      }\n    }\n    if (err !== \"\") {\n      e.target.value = null;\n      console.log(err);\n      return false;\n    }\n    return true;\n  };\n\n  render() {\n    console.log(this.state);\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-md-6\">\n              <form method=\"post\" action=\"#\" id=\"#\">\n                <div className=\"form-group files\">\n                  <label>Upload Your File </label>\n                  <input\n                    type=\"file\"\n                    className=\"form-control\"\n                    name=\"file\"\n                    onChange={this.onChangeHandler}\n                  />\n                </div>\n              </form>\n              <div className=\"form-group\">\n                <Progress max=\"100\" color=\"success\" value={this.state.loaded}>\n                  {Math.round(this.state.loaded, 2)}%\n                </Progress>\n              </div>\n              <button\n                type=\"button\"\n                className=\"btn btn-success btn-block\"\n                onClick={this.onClickHandler}\n              >\n                Upload\n              </button>\n              <div>uploaded files</div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}